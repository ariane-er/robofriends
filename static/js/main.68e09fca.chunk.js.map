{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","components/SearchBox.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","height","width","CardList","robots","cardsArray","map","user","index","key","Scroll","props","style","overflowY","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRequestRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.68e09fca.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    \n    return (\n        <div className=\"tc bg-light-pink dib br3 pa3 ma2 grow bw2 shadow-5\">\n            {/* We'll use a robot API */}\n            <img alt=\"robot\" src={`https://robohash.org/${id}`} height='200' width='200'/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n\n    const cardsArray = robots.map( (user, index) => {\n        return (<Card key={index}\n        id={robots[index].id} \n        name={robots[index].name} \n        email={robots[index].email}/>)\n    })\n\n    return (\n        <div >\n            {cardsArray}\n        </div>\n    )\n}\n\nexport default CardList;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll',  height: '800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError:true})\n\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oops, something went wrong.</h1>\n        }\n        return this.props.children\n    }\n}\n\n\nexport default ErrorBoundary;","import React from \"react\";\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input\n            className=\"pa3 ba b--green bg-lightest-pink\"\n            type=\"search\" \n            placeholder=\"search robots\"\n            onChange={searchChange}/>\n        </div>\n        \n    )\n}\n\nexport default SearchBox;","import React, {Component} from \"react\";\nimport { connect } from 'react-redux';\nimport CardList from \"../components/CardList\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\"\nimport SearchBox from \"../components/SearchBox\"\nimport \"./App.css\";\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n\n    render () {    \n\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n\n        const filteredRobots = robots.filter(robots => {\n            return robots.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n\n        \n        \n        if (isPending) {\n            return <h1>Loading</h1>;\n        } else {\n\n        return(\n            <div className=\"tc\">\n                <h1 className=\"f1\">Robofriends</h1>\n                {/* For example, we passed onSearchChange as PROPS, but it's actually a method. */}\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                <ErrorBoundary>\n                <CardList robots = {filteredRobots}/>\n                </ErrorBoundary>\n                </Scroll>\n            </div>            \n        )}}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_PENDING\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS,\n                                      payload: data}))\n        .catch(error => dispatch ({ type: REQUEST_ROBOTS_FAILED,\n                                        payload: error}))\n}","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_PENDING\n} from \"./constants\";\n\nconst initialStateSearch = {\n    searchField: \"\"\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return {...state, searchField: action.payload};\n        default:\n            return state; \n    }\n}\n\nconst initialStateRequestRobots = {\n    isPending: false,\n    robots: [],\n    error: \"\"\n}\n\nexport const requestRobots = (state=initialStateRequestRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true};\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false};\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false};\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from  'react-redux'; \nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}